//Intro paragraph:
//This program is to implement a maze solver using a recursive depth-first-search.
//it loads the maze from a txt file, and also its row and col number.
//the solution of the maze is represented by the path of "."; "~"represents visited.
#include <stdio.h>
#include <stdlib.h>
#include "maze.h"


/*
 * createMaze -- Creates and fills a maze structure from the given file
 * INPUTS:       fileName - character array containing the name of the maze file
 * OUTPUTS:      None
 * RETURN:       A filled maze structure that represents the contents of the input file
 * SIDE EFFECTS: None
 */
maze_t * createMaze(char * fileName)
{

   FILE *fp1 = fopen(fileName,"r");
   if (fp1==NULL)
   {
     printf("The file doesn't exist.\n");
   }
   maze_t* maze = (maze_t*) malloc(sizeof(maze_t));
   //get the row and col from the file
   int a, b;
   fscanf(fp1, "%d %d", &a, &b);
   maze->width = a;
   maze->height = b;
   //Create the maze from the info of file
   int i, j;
   maze->cells = (char**) malloc(a*sizeof(char*));
   for (i = 0; i < a; i++)
   {
   maze->cells[i] = (char*) malloc(b*sizeof(char));
   }
   //set start and end points
   for (i = 0; i < a; i++)
   {
     fscanf(fp1, "\n");
     for (j = 0; j < b; j++)
     {
       char temp;
       fscanf(fp1,"%c", &temp);
       maze->cells[i][j] = temp;
       if (maze->cells[i][j]== 'S')
       {
         maze->startRow = i;
         maze->startColumn = j;
       }
       if (maze->cells[i][j]== 'E')
       {
         maze->endRow = i;
         maze->endColumn = j;
       }
     }
   }
   return maze;
}

/*
 * destroyMaze -- Frees all memory associated with the maze structure, including the structure itself
 * INPUTS:        maze -- pointer to maze structure that contains all necessary information
 * OUTPUTS:       None
 * RETURN:        None
 * SIDE EFFECTS:  All memory that has been allocated for the maze is freed
 */
void destroyMaze(maze_t * maze)
{
  int i;
  for (i = 0; i < maze->width; i++)
  {
    free (maze->cells[i]); //free all the space allocated, the order matters
  }
  free (maze->cells);
  free (maze);
}

/*
 * printMaze --  Prints out the maze in a human readable format (should look like examples)
 * INPUTS:       maze -- pointer to maze structure that contains all necessary information
 *               width -- width of the maze
 *               height -- height of the maze
 * OUTPUTS:      None
 * RETURN:       None
 * SIDE EFFECTS: Prints the maze to the console
 */
void printMaze(maze_t * maze)
{
  maze->cells[maze->startRow][maze->startColumn]=START;
  maze->cells[maze->endRow][maze->endColumn]=END;
  int i, j;
  for (i = 0; i < maze->width; i++)
  {
    for (j = 0; j < maze->height; j++)
    {
      printf("%c", maze->cells[i][j]); //using the for loops to frint the maze to the screen
    }
    printf("\n");
  }
}

/*
 * solveMazeManhattanDFS -- recursively solves the maze using depth first search,
 * INPUTS:               maze -- pointer to maze structure with all necessary maze information
 *                       col -- the column of the cell currently beinging visited within the maze
 *                       row -- the row of the cell currently being visited within the maze
 * OUTPUTS:              None
 * RETURNS:              0 if the maze is unsolvable, 1 if it is solved
 * SIDE EFFECTS:         Marks maze cells as visited or part of the solution path
 */
int solveMazeManhattanDFS(maze_t * maze, int col, int row)
{
// Base:  if cell is END return 1, not valid return 0
  if ((col >= maze->height) || (row >= maze->width))
    return 0;
  if (maze->cells[row][col]!=EMPTY && maze->cells[row][col]!= START && maze->cells[row][col]!= END)
    return 0;
  if (maze->cells[row][col]==END)
    return 1;

//Recursive: find the path using DFS
  maze->cells[row][col] = PATH;
  //check the cells around the current cell
  if (solveMazeManhattanDFS(maze, col, row+1)==1)
    return 1;
  else if (solveMazeManhattanDFS(maze, col,row-1)==1)
    return 1;
  else if (solveMazeManhattanDFS(maze, col+1,row)==1)
    return 1;
  else if (solveMazeManhattanDFS(maze, col-1,row)==1)
    return 1;
  else
    {
      maze->cells[row][col] = VISITED; //mark as VISITED
      return 0;
    }

}
