//Intro paragraph:
// This program contains functions set_seed, start_game, and make_guess. This will complete the code for the game.
//The code uses the variables solution1, solution2, solution3, and solution4 to
//track the four numbers of the solution code generated by start_game.
//The variable guess_number is used to track which guess the user is on (starting at 1 and possibly going to 6).
//This file is compiled with prog5.h and main.c to process the user inputs for a code-breaking game.

#include <stdio.h>
#include <stdlib.h>

#include "prog5.h"


/*
 * You will need to keep track of the solution code using file scope
 * variables as well as the guess number.
 */

static int guess_number;
static int solution1;
static int solution2;
static int solution3;
static int solution4;


/*
 * set_seed -- This function sets the seed value for pseudorandom
 * number generation based on the number the user types.
 * The input entered by the user is already stored in the string seed_str by the code in main.c.
 * This function should use the function sscanf to find the integer seed value from the
 * string seed_str, then initialize the random number generator by calling srand with the integer
 * seed value. To be valid, exactly one integer must be entered by the user, anything else is invalid.
 * INPUTS: seed_str -- a string (array of characters) entered by the user, containing the random seed
 * OUTPUTS: none
 * RETURN VALUE: 0 if the given string is invalid (string contains anything
 *               other than a single integer), or 1 if string is valid (contains one integer)
 * SIDE EFFECTS: initializes pseudo-random number generation using the function srand. Prints "set_seed: invalid seed\n"
 *               if string is invalid. Prints nothing if it is valid.
 */
int
set_seed (const char seed_str[])
{
    int seed, f;
    char post[2];
    f = sscanf (seed_str,"%d%1s", &seed, post);     /*set "f" as the number of characters succesfully filled by sscanf*/

    if(f == 1){ /*Set the seed value if exactly one integer is in the string.*/
      srand (seed);
      return 1;  /*In the case that the user inputs a valid input and return 1.*/
    }
    else{
      printf ("set_seed: invalid seed\n");
      return 0;  /*If the user inputs an invliad input, the function does not call srand and returns 0.*/
    }

}


/*
 * start_game -- This function is called by main.c after set_seed but before the user makes guesses.
 *               This function creates the four solution numbers using the approach
 *               described in the wiki specification (using rand())
 *               The four solution numbers should be stored in the static variables defined above.
 *               The values at the pointers should also be set to the solution numbers.
 *               The guess_number should be initialized to 1 (to indicate the first guess)
 * INPUTS: none
 * OUTPUTS: *one -- the first solution value (between 1 and 6)
 *          *two -- the second solution value (between 1 and 6)
 *          *three -- the third solution value (between 1 and 6)
 *          *four -- the fourth solution value (between 1 and 6)
 * RETURN VALUE: none
 * SIDE EFFECTS: records the solution in the static solution variables for use by make_guess, set guess_number
 */
void
start_game (int* one, int* two, int* three, int* four)
{
  *one = (rand()%6) + 1; /*generate solutions and store them at *one, *two, *three, and *four respectively*/
  *two = (rand()%6) + 1;
  *three = (rand()%6) + 1;
  *four = (rand()%6) + 1;

  guess_number = 1;  /* Set guess_number to 1.*/
  solution1 = *one;  /*make copies of the solution code using static variables solution1, solution2, solution3, and solution4.*/
  solution2 = *two;
  solution3 = *three;
  solution4 = *four;
}

/*
 * make_guess -- This function is called by main.c after the user types in a guess.
 *               The guess is stored in the string guess_str.
 *               The function must calculate the number of perfect and misplaced matches
 *               for a guess, given the solution recorded earlier by start_game
 *               The guess must be valid (contain only 4 integers, within the range 1-6). If it is valid
 *               the number of correct and incorrect matches should be printed, using the following format
 *               "With guess %d, you got %d perfect matches and %d misplaced matches.\n"
 *               If valid, the guess_number should be incremented.
 *               If invalid, the error message "make_guess: invalid guess\n" should be printed and 0 returned.
 *               For an invalid guess, the guess_number is not incremented.
 * INPUTS: guess_str -- a string consisting of the guess typed by the user
 * OUTPUTS: the following are only valid if the function returns 1 (A valid guess)
 *          *one -- the first guess value (between 1 and 6)
 *          *two -- the second guess value (between 1 and 6)
 *          *three -- the third guess value (between 1 and 6)
 *          *four -- the fourth color value (between 1 and 6)
 * RETURN VALUE: 1 if the guess string is valid (the guess contains exactly four
 *               numbers between 1 and 6), or 0 if it is invalid
 * SIDE EFFECTS: prints (using printf) the number of matches found and increments guess_number(valid guess)
 *               or an error message (invalid guess)
 *               (NOTE: the output format MUST MATCH EXACTLY, check the wiki writeup)
 */
int
make_guess (const char guess_str[], int* one, int* two, int* three, int* four)
{
  int w, x, y, z, f; /*w, x, y, z are variables stores the values of user inputs; f is the flag to incidacte if there are exactly 4 inputs.*/
  char post[2];
  f = sscanf (guess_str, "%d%d%d%d%1s", &w, &x, &y, &z, post);

  if (f != 4)
  { printf("make_guess: invalid guess\n");
    return 0; /*if invalid, returns 0*/
  }
  else
  {
    if (w <= 0 || w >= 7 || x <= 0 || x >= 7 || y <= 0 || y >= 7 || z <= 0 || z >= 7) /*checks the range of inputs btw 1-6 */
    { printf("make_guess: invalid guess\n");
      return 0;
    }
    else
    {
      *one = w; /*store user guesses at *one, *two, *three, and *four respectively*/
      *two = x;
      *three = y;
      *four = z;

      int pm = 0; /*perfect matches*/
      int a = 0, b = 0, c = 0, d = 0; /*flags indicating if the solution codes are paired*/
      int f1 = 0, f2 = 0, f3 = 0, f4 = 0; /*flags indicating if the input codes are paired*/
//start to check perfect matches
      if (w == solution1)
      {
        pm++;
        a = 1;
        f1 = 1;/*1st code paired*/
      }
       if (x == solution2)
      {
        pm++;
        b =1;
        f2 = 1; /*2nd code paired*/
      }
       if (y == solution3)
      {
        pm++;
        c = 1;
        f3 = 1; /*3rd code paired*/
      }
      if (z == solution4)
      {
        pm++;
        d = 1;
        f4 = 1;/*4th code paired*/
      } /*perfect mathes checked*/

// start to check misplaced matches
      int mm = 0; /*misplaced matches*/
        if (f1 == 0)
        {
          if(w == solution2 && b == 0)
          {
            mm++;
            b = 1;
          }
          else
          {
          if (w == solution3 && c == 0)
          {
            mm++;
            c = 1;
          }
          else
          {
          if (w == solution4 && d == 0)
          {
            mm++;
            d = 1;
          }
          }
          }
        } /*1st input checked for misplaced matches*/

        if (f2 == 0)
        {
          if (x == solution1 && a == 0)
          {
            mm++;
            a = 1;
          }
          else
          {
          if (x == solution3 && c == 0)
          {
            mm++;
            c = 1;
          }
          else
          {
          if (x == solution4 && d == 0)
          {
            mm++;
            d = 1;
          }
          }
          }
        } /*2nd input checked for misplaced matches*/

        if (f3 == 0)
        {
          if (y == solution1 && a == 0)
          {
            mm++;
            a = 1;
          }
          else
          {
          if (y == solution2 && b == 0)
          {
            mm++;
            b = 1;
          }
          else
          {
          if (y == solution4 && d == 0)
          {
            mm++;
            d = 1;
          }
          }
          }
        } /*3rd input checked for misplaced matches*/

        if (f4 == 0)
        {
          if (z == solution1 && a == 0)
          {
            mm++;
            a = 1;
          }
          else
          {
          if (z == solution2 && b == 0)
          {
            mm++;
            b = 1;
          }
          else
          {
          if (z == solution3 && c == 0)
          {
            mm++;
            c = 1;
          }
          }
          }
        } /*4th input checked for misplaced matches*/

//pm and mm are checked, print out he message,incremnt guess_number, and return 1
      printf("With guess %d, you got %d perfect matches and %d misplaced matches.\n", guess_number, pm, mm);
      guess_number++; /*increment guess_number*/
      return 1;
    }
  }
}
