module pipelined_machine(clk, reset);
    input        clk, reset;

    wire [31:0]  PC;
    wire [31:2]  next_PC, PC_plus4, PC_target;
    wire [31:0]  inst;

    wire [31:0]  imm = {{ 16{inst[15]} }, inst[15:0] };  // sign-extended immediate
    wire [4:0]   rs = inst[25:21];
    wire [4:0]   rt = inst[20:16];
    wire [4:0]   rd = inst[15:11];
    wire [5:0]   opcode = inst[31:26];
    wire [5:0]   funct = inst[5:0];

    wire [4:0]   wr_regnum;
    wire [2:0]   ALUOp;

    wire         RegWrite, BEQ, ALUSrc, MemRead, MemWrite, MemToReg, RegDst;
    wire         PCSrc, zero;
    wire [31:0]  rd1_data, rd2_data, B_data, alu_out_data, load_data, wr_data;
    wire stall,flush;

    // DO NOT comment out or rename this module
    // or the test bench will break
    wire enable;
    assign enable = ~stall;
    register #(30, 30'h100000) PC_reg(PC[31:2], next_PC[31:2], clk, enable, reset);

    ////////////////////////////////////////////////////////////////////////////////////////////
    //IF/DE
    wire [31:0] inst_in;
    register #(32) inst_reg_ifde(inst, inst_in, clk, enable, flush);

    wire [29:0]  PC_plus4_in;
    register #(30) PC_reg_ifde(PC_plus4, PC_plus4_in, clk, enable, flush);
    ////////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////////////
    //DE/MW
    wire RegWrite_in;
    register #(1) RegWrite_reg(RegWrite, RegWrite_in, clk,  1'b1, reset|stall);

    wire MemRead_in;
    register #(1) MemRead_reg(MemRead, MemRead_in, clk,  1'b1, reset|stall);

    wire MemWrite_in;
    register #(1) MemWrite_reg(MemWrite, MemWrite_in, clk,  1'b1, reset|stall);

    wire MemToReg_in;
    register #(1) MemToReg_reg(MemToReg, MemToReg_in, clk,  1'b1, reset|stall);

    wire [31:0] alu_out_data_in;
    register #(32) ALU_reg(alu_out_data, alu_out_data_in, clk,  1'b1, reset|stall);

    wire [31:0] WriteData_in, WriteData;
    register #(32) WriteData_reg(WriteData, WriteData_in, clk,  1'b1, reset|stall);

    wire [4:0] wr_regnum_in;
    register #(5) wr_regnum_reg(wr_regnum, wr_regnum_in, clk,  1'b1, reset|stall);
    /////////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////////////
    //Forwarding Unit & Muxes
    wire   ForwardA, ForwardB;
    assign ForwardA = ((RegWrite == 1) & (wr_regnum == rs) & (wr_regnum != 0)); /*!=0*/
    assign ForwardB = ((RegWrite == 1) & (wr_regnum == rt) & (wr_regnum != 0)); /*!=0*/

    wire [31:0] A_data;
    mux2v #(32) ForwardA_mux(A_data, rd1_data, alu_out_data, ForwardA);
    mux2v #(32) ForwardB_mux(WriteData_in, rd2_data, alu_out_data, ForwardB);
    /////////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////////////
    //Hazard Unit
    assign stall = (MemRead == 1) & ((wr_regnum == rs) | (wr_regnum == rt)) & (wr_regnum != 0);/*!=0*/
    //flush
    assign flush = PCSrc | reset; /*flush when go to a branch or the machine reseted.*/
    /////////////////////////////////////////////////////////////////////////////////////////////

    assign PC[1:0] = 2'b0;  // bottom bits hard coded to 00
    adder30 next_PC_adder(PC_plus4_in, PC[31:2], 30'h1);
    adder30 target_PC_adder(PC_target, PC_plus4, imm[29:0]);
    mux2v #(30) branch_mux(next_PC, PC_plus4_in, PC_target, PCSrc);
    assign PCSrc = BEQ & zero;

    // DO NOT comment out or rename this module
    // or the test bench will break
    instruction_memory imem(inst_in, PC[31:2]);
    mips_decode decode(ALUOp, RegWrite_in, BEQ, ALUSrc, MemRead_in, MemWrite_in, MemToReg_in, RegDst,
                      opcode, funct);

    // DO NOT comment out or rename this module
    // or the test bench will break
    regfile rf (rd1_data, rd2_data,
               rs, rt, wr_regnum, wr_data,
               RegWrite, clk, reset);

    mux2v #(32) imm_mux(B_data, WriteData_in, imm, ALUSrc);
    alu32 alu(alu_out_data_in, zero, ALUOp, A_data, B_data);

    // DO NOT comment out or rename this module
    // or the test bench will break
    data_mem data_memory(load_data, alu_out_data, WriteData, MemRead, MemWrite, clk, reset);

    mux2v #(32) wb_mux(wr_data, alu_out_data, load_data, MemToReg);
    mux2v #(5) rd_mux(wr_regnum_in, rt, rd, RegDst);

endmodule // pipelined_machine
